<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Splay Tree on Gromit.Blog</title><link>https://gowoonsori.com/tags/splay-tree/</link><description>Recent content in Splay Tree on Gromit.Blog</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><lastBuildDate>Thu, 03 Jun 2021 21:55:46 +0900</lastBuildDate><atom:link href="https://gowoonsori.com/tags/splay-tree/index.xml" rel="self" type="application/rss+xml"/><item><title>Splay Tree</title><link>https://gowoonsori.com/blog/datastructure/splay-tree/</link><pubDate>Thu, 03 Jun 2021 21:55:46 +0900</pubDate><guid>https://gowoonsori.com/blog/datastructure/splay-tree/</guid><description>Splaying이라는 기법이 사용되며, 이는 특정 노드에 대해 접근을 하면, 이를 루트로 위치하도록 재배치 하는 기법의 트리 1. 특징 구현이 단순 많이 접근한 노드에 대해서 빠른 접근이 가능하다 접근 빈도가 불균등하거나 비 랜덤 패턴의 경우 O(lgn)보다 더 유리하다. AVL-Tree와 RB-Tree와 달리 추가 데이터 저장 필요 없다. 최악의 경</description></item></channel></rss>