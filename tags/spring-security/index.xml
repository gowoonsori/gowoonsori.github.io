<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Spring Security on Gromit.Blog</title><link>https://gowoonsori.com/tags/spring-security/</link><description>Recent content in Spring Security on Gromit.Blog</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><lastBuildDate>Sun, 02 May 2021 21:17:07 +0900</lastBuildDate><atom:link href="https://gowoonsori.com/tags/spring-security/index.xml" rel="self" type="application/rss+xml"/><item><title>Spring Security Cors Mapping Error</title><link>https://gowoonsori.com/blog/error/springsecurity-cors-error/</link><pubDate>Sun, 02 May 2021 21:17:07 +0900</pubDate><guid>https://gowoonsori.com/blog/error/springsecurity-cors-error/</guid><description>CORS 란? Cross-Stie HTTP Requests의 약자로 한 도메인이 다른 도메인의 자원을 사용하는 것을 의미하는데, chrome cors 기본정책이 strict-origin-when-cross-origin으로 Same Origin에 대해서만 자원을 사용하도록 제한되어 있다. 여기서 Same-Origin이란 호스트명, 프로토콜, 포트가 같은 도메인을 말한다. Front</description></item><item><title>인증된 사용자 정보 조회</title><link>https://gowoonsori.com/blog/spring/security-get-userdetails/</link><pubDate>Sun, 11 Apr 2021 21:23:56 +0900</pubDate><guid>https://gowoonsori.com/blog/spring/security-get-userdetails/</guid><description>Spring Security의 Filter들을 모두 거쳐 인증에 통과한 User가 특정 Controller에 도달했을 때, User의 정보가 필요할때가 있다. 이때, Url의 도메인으로 id를 표시하거나 param/body로 계속 전달하기도 무리이며, Filter를 통한 인증시에 이미 한번 유저 정보를 조회하는 로직을 수행하게 된다. 그런데</description></item></channel></rss>