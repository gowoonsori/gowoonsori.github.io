<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Spring Boot on Gromit.Blog</title><link>https://gowoonsori.com/tags/spring-boot/</link><description>Recent content in Spring Boot on Gromit.Blog</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><lastBuildDate>Sun, 02 May 2021 21:17:07 +0900</lastBuildDate><atom:link href="https://gowoonsori.com/tags/spring-boot/index.xml" rel="self" type="application/rss+xml"/><item><title>Spring Security Cors Mapping Error</title><link>https://gowoonsori.com/blog/error/spring-security-cors-error/</link><pubDate>Sun, 02 May 2021 21:17:07 +0900</pubDate><guid>https://gowoonsori.com/blog/error/spring-security-cors-error/</guid><description>CORS 란? Cross-Stie HTTP Requests의 약자로 한 도메인이 다른 도메인의 자원을 사용하는 것을 의미하는데, chrome cors 기본정책이 strict-origin-when-cross-origin으로 Same Origin에 대해서만 자원을 사용하도록 제한되어 있다. 여기서 Same-Origin이란 호스트명, 프로토콜, 포트가 같은 도메인을 말한다. Front</description></item><item><title>@OneToMany 관계시 발생한 에러</title><link>https://gowoonsori.com/blog/error/one-to-many-error/</link><pubDate>Sun, 11 Apr 2021 20:51:45 +0900</pubDate><guid>https://gowoonsori.com/blog/error/one-to-many-error/</guid><description>JPA의 구현체인 hiberante를 이용해서 엔티티간의 상속관계를 설정하고 처음 사용해보는데 발생한 에러인 A collection with cascade=&amp;ldquo;all-delete-orphan&amp;rdquo; was no longer referenced by the owning entity instance 문제 해결한 방법을 기록하려고 한다. User의 엔티티와 Customer엔티티간의 1:N 양방향 연관관계를 맺기 위해 User에는 @OneToMany를 Customer에는 @ManyToOn</description></item><item><title>spring boot Graphql CustomContext 생성하기</title><link>https://gowoonsori.com/blog/projects/spring-graphql/custom-context/</link><pubDate>Wed, 07 Apr 2021 23:05:12 +0900</pubDate><guid>https://gowoonsori.com/blog/projects/spring-graphql/custom-context/</guid><description>GraphQL의 요청을 핸들링하는 GraphQLServletContextBuilder를 implements하여 grpahQL요청에 대해 커스텀Context를 반환하도록 만들 수 있다. 예를들어 요청의 헤더에 접근하여 Context에 특정 헤더값을 저장하는 식으로의 custom이 가능하다. 이번 예시에서는 헤더에 a</description></item><item><title>spring boot Graphql 요청 Environment 접근</title><link>https://gowoonsori.com/blog/projects/spring-graphql/environment/</link><pubDate>Sat, 03 Apr 2021 23:53:22 +0900</pubDate><guid>https://gowoonsori.com/blog/projects/spring-graphql/environment/</guid><description>이번에는 Spring Boot GraphQL 환경변수(쿼리명, 파라미터명, 값, 받고자하는 데이터명 등)들을 Controller에서 접근하는 방법을 포스팅하려고 한다. 보통 Rest한 서버의 Controller에서는 @PathVariable , @RequestBody 등과 같은 어노테이션을 이용해서 파라미터들에 접근할 수 있는데 요청자체가 body안에 json형태로 들어오는 graphQL은 위와</description></item><item><title>Spring Security 적용해보기</title><link>https://gowoonsori.com/blog/projects/spring-graphql/security/</link><pubDate>Thu, 01 Apr 2021 15:15:33 +0900</pubDate><guid>https://gowoonsori.com/blog/projects/spring-graphql/security/</guid><description>지난번에 spring boot를 이용해서 graphQL서버를 구성해보았는데, 서비스를 운영할때 가장 중요한 보안을 설정하기 위해 springSecurity를 적용한 사례를 작성해보려고 한다. 우선, 인증 방식을 선택해야 하는데, 버스정보 어플같은 경우 사용자를 구분할 별도의 인증이 필요없기 때문에 간단하게 api-key를 통한 인증을 구현해</description></item><item><title>GraphQL 서버 구축하기</title><link>https://gowoonsori.com/blog/projects/spring-graphql/start/</link><pubDate>Tue, 09 Mar 2021 20:03:04 +0900</pubDate><guid>https://gowoonsori.com/blog/projects/spring-graphql/start/</guid><description>이번에 버스 공공api를 이용해 현재 gps를 기반으로한 승차 예약 시스템 프로젝트를 진행중에 있는데, 이때의 구축과정기를 작성하려고 한다. 1. Spring boot에 GraphQL적용 이유 우선, nodeJS를 이용하면 조금 더 편하게 구현할 수 있었을 텐데 그것이 아닌 Spring boot를 이용해서 GraphQL을 사용하는 이유가 프로젝트를 진행하면서 처</description></item></channel></rss>