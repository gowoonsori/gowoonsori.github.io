<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Projects on Gromit.Blog</title><link>https://gowoonsori.com/categories/projects/</link><description>Recent content in Projects on Gromit.Blog</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><lastBuildDate>Mon, 07 Feb 2022 15:50:57 +0900</lastBuildDate><atom:link href="https://gowoonsori.com/categories/projects/index.xml" rel="self" type="application/rss+xml"/><item><title>Google Analytics 추가하기</title><link>https://gowoonsori.com/blog/projects/hugo/google-analytics/</link><pubDate>Mon, 07 Feb 2022 15:50:57 +0900</pubDate><guid>https://gowoonsori.com/blog/projects/hugo/google-analytics/</guid><description>개인마다 선택한 Theme에 이미 구글 애널리틱스 삽입 코드가 포함되어 있어 config.toml 파일에 추적코드만 삽입하면 되는 경우가 대부분일 것이다. 이 부분은 선택한 theme 문서를 잘 확인해보고 만약에 없다면 아래와 같은 방법으로 추가해줄 수 있다. 1. Google Analytics 추적 코드 발급 구글 애널리틱스를 추가하기 위해서는 당연히 구글의 애널리틱스에 가입을 먼저 해야 한다. 가입을 하</description></item><item><title>spring boot Graphql CustomContext 생성하기</title><link>https://gowoonsori.com/blog/projects/spring-graphql/custom-context/</link><pubDate>Wed, 07 Apr 2021 23:05:12 +0900</pubDate><guid>https://gowoonsori.com/blog/projects/spring-graphql/custom-context/</guid><description>GraphQL의 요청을 핸들링하는 GraphQLServletContextBuilder를 implements하여 grpahQL요청에 대해 커스텀Context를 반환하도록 만들 수 있다. 예를들어 요청의 헤더에 접근하여 Context에 특정 헤더값을 저장하는 식으로의 custom이 가능하다. 이번 예시에서는 헤더에 a</description></item><item><title>spring boot Graphql 요청 Environment 접근</title><link>https://gowoonsori.com/blog/projects/spring-graphql/environment/</link><pubDate>Sat, 03 Apr 2021 23:53:22 +0900</pubDate><guid>https://gowoonsori.com/blog/projects/spring-graphql/environment/</guid><description>이번에는 Spring Boot GraphQL 환경변수(쿼리명, 파라미터명, 값, 받고자하는 데이터명 등)들을 Controller에서 접근하는 방법을 포스팅하려고 한다. 보통 Rest한 서버의 Controller에서는 @PathVariable , @RequestBody 등과 같은 어노테이션을 이용해서 파라미터들에 접근할 수 있는데 요청자체가 body안에 json형태로 들어오는 graphQL은 위와</description></item><item><title>Spring Security 적용해보기</title><link>https://gowoonsori.com/blog/projects/spring-graphql/security/</link><pubDate>Thu, 01 Apr 2021 15:15:33 +0900</pubDate><guid>https://gowoonsori.com/blog/projects/spring-graphql/security/</guid><description>지난번에 spring boot를 이용해서 graphQL서버를 구성해보았는데, 서비스를 운영할때 가장 중요한 보안을 설정하기 위해 springSecurity를 적용한 사례를 작성해보려고 한다. 우선, 인증 방식을 선택해야 하는데, 버스정보 어플같은 경우 사용자를 구분할 별도의 인증이 필요없기 때문에 간단하게 api-key를 통한 인증을 구현해</description></item><item><title>페이징 기능 추가하기</title><link>https://gowoonsori.com/blog/projects/hugo/pagination/</link><pubDate>Wed, 10 Mar 2021 20:49:41 +0900</pubDate><guid>https://gowoonsori.com/blog/projects/hugo/pagination/</guid><description>각종 css와 shortcode들을 추가했던 이전 글 에 이어 이번에는 pagination을 추가해보려고 한다. 저는 각 카테고리의 메인 페이지에서는 해당 카테고리의 글들을 paging처리하여 모두 볼 수 있게 구성을 하고 싶었는 데, 제가 사용하고 있는 docport 테마는 paging처리가 들어있지 않은 테마였다. 그래서 hugo 공식사이트 를 참고하여 적</description></item><item><title>GraphQL 서버 구축하기</title><link>https://gowoonsori.com/blog/projects/spring-graphql/start/</link><pubDate>Tue, 09 Mar 2021 20:03:04 +0900</pubDate><guid>https://gowoonsori.com/blog/projects/spring-graphql/start/</guid><description>이번에 버스 공공api를 이용해 현재 gps를 기반으로한 승차 예약 시스템 프로젝트를 진행중에 있는데, 이때의 구축과정기를 작성하려고 한다. 1. Spring boot에 GraphQL적용 이유 우선, nodeJS를 이용하면 조금 더 편하게 구현할 수 있었을 텐데 그것이 아닌 Spring boot를 이용해서 GraphQL을 사용하는 이유가 프로젝트를 진행하면서 처</description></item><item><title>PointRee 프로젝트 3 - back 개발환경 셋팅과 db설계</title><link>https://gowoonsori.com/blog/projects/react-project/3/</link><pubDate>Fri, 29 Jan 2021 23:44:32 +0900</pubDate><guid>https://gowoonsori.com/blog/projects/react-project/3/</guid><description>IntelliJ를 이용해서 pointRee폴더 내에 back폴더를 생성해주고 여기에 spring boot 2.4로 프로젝트를 시작했다. dependencies { implementation group: &amp;#39;org.springframework.boot&amp;#39;, name: &amp;#39;spring-boot-starter-web&amp;#39; testImplementation &amp;#39;org.springframework.boot:spring-boot-starter-test&amp;#39; //db implementation &amp;#39;org.springframework.boot:spring-boot-starter-data-jpa&amp;#39; implementation &amp;#39;org.springframework.boot:spring-boot-starter-validation&amp;#39; implementation &amp;#39;com.h2database:h2&amp;#39; implementation &amp;#39;mysql:mysql-connector-java&amp;#39; //lombok compileOnly &amp;#39;org.projectlombok:lombok&amp;#39; annotationProcessor &amp;#39;org.projectlombok:lombok&amp;#39; } dependency는 위와 같이 추가해주었다. 1. db설계 포인트의 유효기간을 처음에 생각을 했었으나 db설계와 구현과정에 있어 많은 시간이 생각보다 소요될</description></item><item><title>PointRee 프로젝트 2 - front 개발환경 셋팅과 전체적인 디자인</title><link>https://gowoonsori.com/blog/projects/react-project/2/</link><pubDate>Sun, 24 Jan 2021 14:09:48 +0900</pubDate><guid>https://gowoonsori.com/blog/projects/react-project/2/</guid><description>mkdir pointRee cd pointRee mkdir front cd front npm init -y npm install react-create-app 가장 먼저 vscode를 통해 wsl2에 접속하고 wsl2에 폴더를 만들어 주고 react-create-app으로 간단하게 react프로젝트를 시작했다. 그리고 npm run start로 시작해보면 정상적으로 프로젝트가 실행되는 것을 확인 할 수 있다. 이때 나처럼 wsl2로 실행시킨 사람이라면 window</description></item><item><title>PointRee 프로젝트 1 - 설계와 환경 구성</title><link>https://gowoonsori.com/blog/projects/react-project/1/</link><pubDate>Thu, 21 Jan 2021 13:41:25 +0900</pubDate><guid>https://gowoonsori.com/blog/projects/react-project/1/</guid><description>웹 전반적인 흐름도 익히고 프레임워크들도 공부하기 위해 토이 프로젝트로 간단한 고객 정보를 관리하고 포인트 적립을 하는 웹을 구현해보고자 한다. 사용할 스택으로는 크게 React와 Spring Boot를 사용해서 개발해보려고 한다. React는 사용을 해본적이 있고 JS에 관심이 많기 때문에 선택을 하였고, 백을 JS 프레임워크가 아닌 굳이 Spring Boot를 사</description></item><item><title>포인트 적립을 위한 웹 제작기</title><link>https://gowoonsori.com/blog/projects/react-project/start/</link><pubDate>Tue, 19 Jan 2021 14:09:48 +0900</pubDate><guid>https://gowoonsori.com/blog/projects/react-project/start/</guid><description>방학때 엄마집에 있으며 엄마 가게를 도와주다가 갑자기 엄마가 운영하는 꽃집에 포인트 적립을 한번 도입해보고 싶다고 하셨다. 지류로 하는 도장형식은 하기 싫다고 하셨고 운영도 애매하다 하시면서 요즘 태블릿으로 전화번호만 입력하면 포스기랑 연동되어 적립이 된다더라라고 말을 하셨다. 그런데 이는 년단위 계약에 적지 않은 돈을 지불하는 유료 서비스이고 우</description></item><item><title>Packet Capture Program 만들기</title><link>https://gowoonsori.com/blog/projects/packet-capture/</link><pubDate>Fri, 11 Dec 2020 00:43:18 +0900</pubDate><guid>https://gowoonsori.com/blog/projects/packet-capture/</guid><description>Linux환경에서 C를 이용해 raw socket을 이용한 tcpdump의 interface를 모방하는 패킷 캡쳐 프로그램 작성하는 것을 목표로 시작했습니다. 캡쳐할 정보는 IPv4(이더넷 타입이 0x0800 (ip헤더의 버전이 4)를 기반으로 2계층인 Ethernet 정보부터 패킷을 수집하여 앞에서부터 잘라내면서, Ethernet header | ip header | TCP/UDP/ICMP header | data(payload) 캡쳐 하는 프로그램</description></item><item><title>Hugo theme Custom 하기</title><link>https://gowoonsori.com/blog/projects/hugo/custom/</link><pubDate>Wed, 23 Sep 2020 17:45:19 +0900</pubDate><guid>https://gowoonsori.com/blog/projects/hugo/custom/</guid><description>우선 theme 마다 파일 경로나 파일이름, 설정방법은 조금씩 다를 수 있다는 것을 알리고 시작하겠다. 저는 theme-docport 를 사용하고 있고, 왼쪽에 카테고리 별로 구분할 수있는 기능과 오른쪽에 특정 header로의 이동기능이 있는 테마를 찾다가 이 테마를 선택했다. 1. Code 태그 수정 1) 인라인 코드 해당 code 태그의 css가 정의된 파일을 찾아야 되는데 hugo는 적용방식이 t</description></item><item><title>Hugo와 Github page로 블로그 구축</title><link>https://gowoonsori.com/blog/projects/hugo/start/</link><pubDate>Wed, 23 Sep 2020 17:45:19 +0900</pubDate><guid>https://gowoonsori.com/blog/projects/hugo/start/</guid><description>Note 블로그를 작성하기로 마음 먹은 후에 가장 먼저 할 일이 블로그를 만드는 것이었다. hugo와 github을 사용하면서 블로그를 open하는 과정과 겪었던 문제점들, 추가한 내용들을 정리하여 hugo를 선택하신분들에게 조금이나마 도움이 되고자 한다. hugo를 선택한 이유 github page를 이용하여 블로그를 운영하는데 다양한 generat</description></item></channel></rss>